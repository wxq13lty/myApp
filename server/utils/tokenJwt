const jwt = require('jsonwebtoken');
const { expressjwt: expressJwt } = require('express-jwt');
const message = require('./message');
const SECRET_KEY = 'admin_wxq_work';
//生成token
// 修正后的 createToken 函数
function createToken(userId) {
    // 载荷应该是对象格式，而不是字符串
    const payload = {
        userId: userId,
        // 其他需要的信息
    };

    // 修正变量名，使用已定义的 SECRET_KEY
    return jwt.sign(payload, SECRET_KEY, {
        expiresIn: '72h' // 或者使用秒数：72 * 60 * 60
    });
}
//验证token
const verifyToken = (token) => {
    try {
        const decoded = jwt.verify(token, SECRET_KEY);
        return decoded; // 返回解码后的信息
    }
    catch (err) {
        return message.createMessage(false, '无效的Token', null, 401); // token无效或过期
    }
}
//中间件，验证token
const jwtMiddleware = expressJwt({
    secret: SECRET_KEY,
    algorithms: ['HS256']
}).unless({
    path: ['/login','/register'] // 登录和注册接口不需要验证Token
});
// 解析token
const parseToken = (req) => {
    const authHeader = req.headers['authorization'];
    if (authHeader) {
        const token = authHeader.split(' ')[1]; // Bearer <token>
        return verifyToken(token);
    } else {
        return message.createMessage(false, '未提供Token', null, 401);
    }
}

module.exports = {
    createToken,
    verifyToken,
    jwtMiddleware,
    parseToken
};
